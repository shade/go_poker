syntax = "proto3";
package table;

message Table {
    // The set of options used to create this table.
    TableOptions options = 1;
    // The serialized list of players for this table.
    repeated Player players = 2;

    // The set of cards currently on the table. 
    CardSet board_cards = 3;
    
    // The seat number of the player with the button.
    uint32 button_seat = 5;
    // The seat number of the player who is to act.
    uint32 action_seat = 6;
}

message TableOptions {
    // The name given to the table, must be unique.
    string name = 1;
    // The owner of this table, other than the admin this is the only
    // player allowed to destroy this table.
    string owner = 2;
    // The minimum number of chips required to join this table.
    uint64 min_buy = 3;
    // The maximum seats allowed at this table.
    uint32 max_seats = 4;
    // The big blind value, the small blind will be floor(big_blind/2).
    uint64 big_blind = 5;
    // If this is true the seats will be shuffled after the dealer is
    // determined at the start of the game.
    bool seat_shuffle = 6;
    // If this is non-zero the seats will be shuffled after the specified
    // number of rounds have passed.
    uint64 seat_shuffle_rounds = 7;
    // Conversion to CAD; (rate chips) = $0.01 CAD.
    uint64 rate = 8;
    // Number of seconds to wait after some one goes bust, to rebuy. 
    uint32 busted_rebuy_time = 9;
    // Number of seconds to wait between rounds.
    uint32 round_delay = 10;
    // The amount of time to wait before a hand action times out.
    uint32 action_timeout = 11; 
}

enum PlayerState {
    PENDING = 0;
    FOLD = 1;
    CHECKED = 2;
    RAISED = 3;
    CALLED = 4;
    ALL_IN = 5;

    STOOD_UP = 10;
}

message Player {
    // The public id of the player.
    string name = 1;
    // The number of chips this player has currently has.
    uint64 balance = 2;
    // The current player state.
    PlayerState state = 3;
    // The position of seat this player is currently occupying, zero indexed.
    uint32 seat_num = 4;
}

message Card {
    // The suit of the card oneof: 's', 'h', 'd', 'c'.
    string suit = 1;
    // The rank of the card [0, 12].
    int32 rank = 2;
}

// Created due to the inability to have repetitions in one ofs.
message CardSet {
    repeated Card cards = 1;
}
