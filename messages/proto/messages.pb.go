// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/messages.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	proto/messages.proto

It has these top-level messages:
	Packet
	SitEvent
	StandEvent
	SitAck
	StandAck
	TableState
	PlayerSeat
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_UNDEFINED       EventType = 0
	EventType_JOIN_TABLE      EventType = 32
	EventType_TABLE_SIT       EventType = 33
	EventType_TABLE_STAND     EventType = 34
	EventType_TABLE_SIT_ACK   EventType = 49
	EventType_TABLE_STAND_ACK EventType = 50
	EventType_CHAT_MSG        EventType = 128
)

var EventType_name = map[int32]string{
	0:   "UNDEFINED",
	32:  "JOIN_TABLE",
	33:  "TABLE_SIT",
	34:  "TABLE_STAND",
	49:  "TABLE_SIT_ACK",
	50:  "TABLE_STAND_ACK",
	128: "CHAT_MSG",
}
var EventType_value = map[string]int32{
	"UNDEFINED":       0,
	"JOIN_TABLE":      32,
	"TABLE_SIT":       33,
	"TABLE_STAND":     34,
	"TABLE_SIT_ACK":   49,
	"TABLE_STAND_ACK": 50,
	"CHAT_MSG":        128,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Packet struct {
	Event EventType `protobuf:"varint,1,opt,name=event,enum=EventType" json:"event,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Packet_Sit
	//	*Packet_Stand
	//	*Packet_SitAck
	//	*Packet_StandAck
	//	*Packet_JoinState
	Payload isPacket_Payload `protobuf_oneof:"payload"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isPacket_Payload interface{ isPacket_Payload() }

type Packet_Sit struct {
	Sit *SitEvent `protobuf:"bytes,2,opt,name=sit,oneof"`
}
type Packet_Stand struct {
	Stand *StandEvent `protobuf:"bytes,3,opt,name=stand,oneof"`
}
type Packet_SitAck struct {
	SitAck *SitAck `protobuf:"bytes,4,opt,name=sit_ack,json=sitAck,oneof"`
}
type Packet_StandAck struct {
	StandAck *StandAck `protobuf:"bytes,5,opt,name=stand_ack,json=standAck,oneof"`
}
type Packet_JoinState struct {
	JoinState *TableState `protobuf:"bytes,6,opt,name=join_state,json=joinState,oneof"`
}

func (*Packet_Sit) isPacket_Payload()       {}
func (*Packet_Stand) isPacket_Payload()     {}
func (*Packet_SitAck) isPacket_Payload()    {}
func (*Packet_StandAck) isPacket_Payload()  {}
func (*Packet_JoinState) isPacket_Payload() {}

func (m *Packet) GetPayload() isPacket_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Packet) GetEvent() EventType {
	if m != nil {
		return m.Event
	}
	return EventType_UNDEFINED
}

func (m *Packet) GetSit() *SitEvent {
	if x, ok := m.GetPayload().(*Packet_Sit); ok {
		return x.Sit
	}
	return nil
}

func (m *Packet) GetStand() *StandEvent {
	if x, ok := m.GetPayload().(*Packet_Stand); ok {
		return x.Stand
	}
	return nil
}

func (m *Packet) GetSitAck() *SitAck {
	if x, ok := m.GetPayload().(*Packet_SitAck); ok {
		return x.SitAck
	}
	return nil
}

func (m *Packet) GetStandAck() *StandAck {
	if x, ok := m.GetPayload().(*Packet_StandAck); ok {
		return x.StandAck
	}
	return nil
}

func (m *Packet) GetJoinState() *TableState {
	if x, ok := m.GetPayload().(*Packet_JoinState); ok {
		return x.JoinState
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Packet) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Packet_OneofMarshaler, _Packet_OneofUnmarshaler, _Packet_OneofSizer, []interface{}{
		(*Packet_Sit)(nil),
		(*Packet_Stand)(nil),
		(*Packet_SitAck)(nil),
		(*Packet_StandAck)(nil),
		(*Packet_JoinState)(nil),
	}
}

func _Packet_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Packet)
	// payload
	switch x := m.Payload.(type) {
	case *Packet_Sit:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sit); err != nil {
			return err
		}
	case *Packet_Stand:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Stand); err != nil {
			return err
		}
	case *Packet_SitAck:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SitAck); err != nil {
			return err
		}
	case *Packet_StandAck:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StandAck); err != nil {
			return err
		}
	case *Packet_JoinState:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinState); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Packet.Payload has unexpected type %T", x)
	}
	return nil
}

func _Packet_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Packet)
	switch tag {
	case 2: // payload.sit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SitEvent)
		err := b.DecodeMessage(msg)
		m.Payload = &Packet_Sit{msg}
		return true, err
	case 3: // payload.stand
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StandEvent)
		err := b.DecodeMessage(msg)
		m.Payload = &Packet_Stand{msg}
		return true, err
	case 4: // payload.sit_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SitAck)
		err := b.DecodeMessage(msg)
		m.Payload = &Packet_SitAck{msg}
		return true, err
	case 5: // payload.stand_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StandAck)
		err := b.DecodeMessage(msg)
		m.Payload = &Packet_StandAck{msg}
		return true, err
	case 6: // payload.join_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableState)
		err := b.DecodeMessage(msg)
		m.Payload = &Packet_JoinState{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Packet_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Packet)
	// payload
	switch x := m.Payload.(type) {
	case *Packet_Sit:
		s := proto.Size(x.Sit)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Packet_Stand:
		s := proto.Size(x.Stand)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Packet_SitAck:
		s := proto.Size(x.SitAck)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Packet_StandAck:
		s := proto.Size(x.StandAck)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Packet_JoinState:
		s := proto.Size(x.JoinState)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SitEvent struct {
	TableId           string `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	UserIdentityToken string `protobuf:"bytes,2,opt,name=user_identity_token,json=userIdentityToken" json:"user_identity_token,omitempty"`
	Chips             int32  `protobuf:"varint,3,opt,name=chips" json:"chips,omitempty"`
}

func (m *SitEvent) Reset()                    { *m = SitEvent{} }
func (m *SitEvent) String() string            { return proto.CompactTextString(m) }
func (*SitEvent) ProtoMessage()               {}
func (*SitEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SitEvent) GetTableId() string {
	if m != nil {
		return m.TableId
	}
	return ""
}

func (m *SitEvent) GetUserIdentityToken() string {
	if m != nil {
		return m.UserIdentityToken
	}
	return ""
}

func (m *SitEvent) GetChips() int32 {
	if m != nil {
		return m.Chips
	}
	return 0
}

type StandEvent struct {
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (m *StandEvent) Reset()                    { *m = StandEvent{} }
func (m *StandEvent) String() string            { return proto.CompactTextString(m) }
func (*StandEvent) ProtoMessage()               {}
func (*StandEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StandEvent) GetTableId() string {
	if m != nil {
		return m.TableId
	}
	return ""
}

type SitAck struct {
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	SatDown bool   `protobuf:"varint,2,opt,name=sat_down,json=satDown" json:"sat_down,omitempty"`
	SeatNum int32  `protobuf:"varint,3,opt,name=seat_num,json=seatNum" json:"seat_num,omitempty"`
	Reason  string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (m *SitAck) Reset()                    { *m = SitAck{} }
func (m *SitAck) String() string            { return proto.CompactTextString(m) }
func (*SitAck) ProtoMessage()               {}
func (*SitAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SitAck) GetTableId() string {
	if m != nil {
		return m.TableId
	}
	return ""
}

func (m *SitAck) GetSatDown() bool {
	if m != nil {
		return m.SatDown
	}
	return false
}

func (m *SitAck) GetSeatNum() int32 {
	if m != nil {
		return m.SeatNum
	}
	return 0
}

func (m *SitAck) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type StandAck struct {
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	StoodUp bool   `protobuf:"varint,2,opt,name=stood_up,json=stoodUp" json:"stood_up,omitempty"`
	Balance int32  `protobuf:"varint,3,opt,name=balance" json:"balance,omitempty"`
	Reason  string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (m *StandAck) Reset()                    { *m = StandAck{} }
func (m *StandAck) String() string            { return proto.CompactTextString(m) }
func (*StandAck) ProtoMessage()               {}
func (*StandAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StandAck) GetTableId() string {
	if m != nil {
		return m.TableId
	}
	return ""
}

func (m *StandAck) GetStoodUp() bool {
	if m != nil {
		return m.StoodUp
	}
	return false
}

func (m *StandAck) GetBalance() int32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *StandAck) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type TableState struct {
	MinBuy   int32         `protobuf:"varint,1,opt,name=min_buy,json=minBuy" json:"min_buy,omitempty"`
	MaxSeats int32         `protobuf:"varint,2,opt,name=max_seats,json=maxSeats" json:"max_seats,omitempty"`
	BigBlind int32         `protobuf:"varint,3,opt,name=big_blind,json=bigBlind" json:"big_blind,omitempty"`
	Seats    []*PlayerSeat `protobuf:"bytes,4,rep,name=seats" json:"seats,omitempty"`
}

func (m *TableState) Reset()                    { *m = TableState{} }
func (m *TableState) String() string            { return proto.CompactTextString(m) }
func (*TableState) ProtoMessage()               {}
func (*TableState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TableState) GetMinBuy() int32 {
	if m != nil {
		return m.MinBuy
	}
	return 0
}

func (m *TableState) GetMaxSeats() int32 {
	if m != nil {
		return m.MaxSeats
	}
	return 0
}

func (m *TableState) GetBigBlind() int32 {
	if m != nil {
		return m.BigBlind
	}
	return 0
}

func (m *TableState) GetSeats() []*PlayerSeat {
	if m != nil {
		return m.Seats
	}
	return nil
}

type PlayerSeat struct {
	Player  string `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Balance int32  `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	SeatNum int32  `protobuf:"varint,3,opt,name=seat_num,json=seatNum" json:"seat_num,omitempty"`
}

func (m *PlayerSeat) Reset()                    { *m = PlayerSeat{} }
func (m *PlayerSeat) String() string            { return proto.CompactTextString(m) }
func (*PlayerSeat) ProtoMessage()               {}
func (*PlayerSeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PlayerSeat) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *PlayerSeat) GetBalance() int32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *PlayerSeat) GetSeatNum() int32 {
	if m != nil {
		return m.SeatNum
	}
	return 0
}

func init() {
	proto.RegisterType((*Packet)(nil), "Packet")
	proto.RegisterType((*SitEvent)(nil), "SitEvent")
	proto.RegisterType((*StandEvent)(nil), "StandEvent")
	proto.RegisterType((*SitAck)(nil), "SitAck")
	proto.RegisterType((*StandAck)(nil), "StandAck")
	proto.RegisterType((*TableState)(nil), "TableState")
	proto.RegisterType((*PlayerSeat)(nil), "PlayerSeat")
	proto.RegisterEnum("EventType", EventType_name, EventType_value)
}

func init() { proto.RegisterFile("proto/messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdb, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x9b, 0x6d, 0xb9, 0x9d, 0xa9, 0x5b, 0xe6, 0x4d, 0x90, 0x09, 0x21, 0x75, 0xe1, 0x81,
	0x0a, 0xa1, 0x22, 0xca, 0x5f, 0xd0, 0xae, 0x85, 0x96, 0x4b, 0x99, 0x9c, 0xec, 0x81, 0x27, 0xcb,
	0x69, 0xac, 0x62, 0xda, 0x5c, 0xa8, 0x1d, 0xb6, 0xbc, 0x01, 0xff, 0x33, 0xef, 0xc8, 0x4e, 0xda,
	0x8e, 0x87, 0x8d, 0x37, 0xff, 0xce, 0xf7, 0xb9, 0xdf, 0x39, 0xa7, 0x31, 0x9c, 0x15, 0xeb, 0x5c,
	0xe6, 0xaf, 0x52, 0x26, 0x04, 0x5d, 0x30, 0xd1, 0xd3, 0x18, 0xfc, 0x31, 0xc0, 0xba, 0xa2, 0xf3,
	0x25, 0x93, 0xa8, 0x03, 0x26, 0xfb, 0xc1, 0x32, 0xe9, 0x1b, 0x1d, 0xa3, 0x7b, 0xd4, 0x87, 0xde,
	0x58, 0x51, 0x54, 0x15, 0x0c, 0xd7, 0x02, 0x7a, 0x0a, 0xfb, 0x82, 0x4b, 0x7f, 0xaf, 0x63, 0x74,
	0x0f, 0xfb, 0x6e, 0x2f, 0xe4, 0x52, 0x5b, 0x26, 0x2d, 0xac, 0xea, 0xe8, 0x19, 0x98, 0x42, 0xd2,
	0x2c, 0xf1, 0xf7, 0xb5, 0xe1, 0xb0, 0x17, 0x2a, 0xda, 0x58, 0x6a, 0x0d, 0x05, 0x60, 0x0b, 0x2e,
	0x09, 0x9d, 0x2f, 0xfd, 0x03, 0x6d, 0xb3, 0xd5, 0xef, 0x0c, 0xe6, 0xcb, 0x49, 0x0b, 0x5b, 0x42,
	0x9f, 0x50, 0x17, 0x5c, 0x6d, 0xd6, 0x2e, 0x73, 0x93, 0xa6, 0x2a, 0xb5, 0xcf, 0x11, 0xcd, 0x19,
	0xbd, 0x04, 0xf8, 0x96, 0xf3, 0x8c, 0x08, 0x49, 0x25, 0xf3, 0xad, 0x26, 0x37, 0xa2, 0xf1, 0x8a,
	0x85, 0xaa, 0x34, 0x69, 0x61, 0x57, 0x19, 0x34, 0x0c, 0x5d, 0xb0, 0x0b, 0x5a, 0xad, 0x72, 0x9a,
	0x04, 0x4b, 0x70, 0x36, 0xed, 0xa3, 0x73, 0x70, 0xa4, 0xba, 0x41, 0x78, 0xa2, 0x67, 0x77, 0xb1,
	0xad, 0x79, 0x9a, 0xa0, 0x1e, 0x9c, 0x96, 0x82, 0xad, 0x09, 0x4f, 0x58, 0x26, 0xb9, 0xac, 0x88,
	0xcc, 0x97, 0x2c, 0xd3, 0x1b, 0x70, 0xf1, 0x89, 0x92, 0xa6, 0x8d, 0x12, 0x29, 0x01, 0x9d, 0x81,
	0x39, 0xff, 0xca, 0x0b, 0xa1, 0x57, 0x60, 0xe2, 0x1a, 0x82, 0xe7, 0x00, 0xbb, 0x55, 0x3c, 0x10,
	0x17, 0x7c, 0x07, 0xab, 0x5e, 0xc6, 0x43, 0x3d, 0x9d, 0x83, 0x23, 0xa8, 0x24, 0x49, 0x7e, 0x53,
	0x37, 0xe2, 0x60, 0x5b, 0x50, 0x39, 0xca, 0x6f, 0x32, 0x2d, 0x31, 0x2a, 0x49, 0x56, 0xa6, 0x4d,
	0x07, 0xb6, 0xe2, 0x59, 0x99, 0xa2, 0x47, 0x60, 0xad, 0x19, 0x15, 0x79, 0xa6, 0xd7, 0xee, 0xe2,
	0x86, 0x82, 0x35, 0x38, 0x9b, 0xcd, 0xfe, 0x2f, 0x54, 0xe6, 0x79, 0x42, 0xca, 0x62, 0x1b, 0xaa,
	0xf8, 0xba, 0x40, 0x3e, 0xd8, 0x31, 0x5d, 0xd1, 0x6c, 0xce, 0x36, 0x99, 0x0d, 0xde, 0x9b, 0xf9,
	0xdb, 0x00, 0xd8, 0xfd, 0x47, 0xe8, 0x31, 0xd8, 0x29, 0xcf, 0x48, 0x5c, 0x56, 0x3a, 0xd5, 0xc4,
	0x56, 0xca, 0xb3, 0x61, 0x59, 0xa1, 0x27, 0xe0, 0xa6, 0xf4, 0x96, 0xa8, 0x11, 0x84, 0x4e, 0x35,
	0xb1, 0x93, 0xd2, 0xdb, 0x50, 0xb1, 0x12, 0x63, 0xbe, 0x20, 0xf1, 0x8a, 0x37, 0x5f, 0x9c, 0x89,
	0x9d, 0x98, 0x2f, 0x86, 0x8a, 0xd1, 0x05, 0x98, 0xf5, 0xad, 0x83, 0xce, 0xbe, 0xfe, 0x24, 0xae,
	0x56, 0xb4, 0x62, 0x6b, 0x75, 0x13, 0xd7, 0x4a, 0xf0, 0x05, 0x60, 0x57, 0x54, 0xad, 0x16, 0x9a,
	0x9a, 0xc1, 0x1b, 0xba, 0x3b, 0xdc, 0xde, 0xbf, 0xc3, 0xdd, 0xbf, 0xeb, 0x17, 0xbf, 0x0c, 0x70,
	0xb7, 0x8f, 0x07, 0xb5, 0xc1, 0xbd, 0x9e, 0x8d, 0xc6, 0x6f, 0xa7, 0xb3, 0xf1, 0xc8, 0x6b, 0xa1,
	0x23, 0x80, 0xf7, 0x9f, 0xa7, 0x33, 0x12, 0x0d, 0x86, 0x1f, 0xc7, 0x5e, 0x47, 0xc9, 0xfa, 0x48,
	0xc2, 0x69, 0xe4, 0x5d, 0xa0, 0x63, 0x38, 0x6c, 0x30, 0x1a, 0xcc, 0x46, 0x5e, 0x80, 0x4e, 0xa0,
	0xbd, 0xd5, 0xc9, 0xe0, 0xf2, 0x83, 0xf7, 0x1a, 0x9d, 0xc2, 0xf1, 0x1d, 0x8f, 0x2e, 0xf6, 0x51,
	0x1b, 0x9c, 0xcb, 0xc9, 0x20, 0x22, 0x9f, 0xc2, 0x77, 0xde, 0x4f, 0x23, 0xb6, 0xf4, 0xfb, 0x7e,
	0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x41, 0x9c, 0x70, 0x65, 0xf7, 0x03, 0x00, 0x00,
}
